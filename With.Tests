using System;
using System.Immutable;

namespace With.Tests {

  public class Employee : IImmutable {
    public string FirstName { get; }
    public readonly string LastName;

    public Employee(string firstName, string lastName) {
      FirstName = firstName;
      LastName = lastName;
    }
  }

  public class Department : IImmutable {
    public string Title { get; }
    public Employee Manager { get; }
    public DateTime Created { get; }

    public Department() : this("", new Employee("", "")) { }
    public Department(string title, int manager) : this(title, new Employee("", "")) { }
    public Department(string title) : this(title, new Employee("", "")) { }

    // With will choose this ctor 
    public Department(string title, Employee manager) {
      Title = title;
      Manager = manager;
      Created = DateTime.Now;
    }
  }

  public class Organization : IImmutable {
    public string Name { get; }
    public Department Sales { get; }

    public Organization(string name, Department sales) {
      Name = name;
      Sales = sales;
    }
  }


  class Program {

    static void Main(string[] args) {
      var expected = new Organization("Organization", new Department("Development Department", new Employee("John", "Doe")));
      var actual = expected.With(x => x.Sales.Manager.FirstName, "Foo");

      Console.WriteLine(expected.Sales.Manager.FirstName);
      Console.WriteLine(actual.Sales.Manager.FirstName);
      Console.WriteLine(Object.ReferenceEquals(expected, actual)); // false
      Console.WriteLine(Object.ReferenceEquals(expected.Sales, actual.Sales)); // false
      Console.WriteLine(Object.ReferenceEquals(expected.Sales.Manager, actual.Sales.Manager)); // false
      Console.WriteLine(Object.ReferenceEquals(expected.Name, actual.Name)); // true
      Console.WriteLine(Object.ReferenceEquals(expected.Sales.Title, expected.Sales.Title)); // true

      var actual1 = expected.With(x => x.Sales.Manager.FirstName, "Foo");
      Console.WriteLine(Object.ReferenceEquals(actual, actual1)); // false

      Console.ReadKey(true);
    }
  }
}

