using System;
using System.Immutable;

namespace With.Tests {

  public class Employee : IImmutable {
    public string EmployeeFirstName { get; }
    public readonly string EmployeeLastName;

    public Employee(string employeeFirstName, string employeeLastName) {
      EmployeeFirstName = employeeFirstName;
      EmployeeLastName = employeeLastName;
    }
  }

  public class Department : IImmutable {
    public string DepartmentTitle { get; }
    public Employee Manager { get; }
    public DateTime Created { get; }

    public Department() : this("", new Employee("", "")) { }
    public Department(string departmentTitle, int manager) : this(departmentTitle, new Employee("", "")) { }
    public Department(string departmentTitle) : this(departmentTitle, new Employee("", "")) { }

    public Department(string departmentTitle, Employee manager) {
      DepartmentTitle = departmentTitle;
      Manager = manager;
      Created = DateTime.Now;
    }
  }

  public class Organization : IImmutable {
    public string OrganizationName { get; }
    public Department DevelopmentDepartment { get; }

    public Organization(string organizationName, Department developmentDepartment) {
      OrganizationName = organizationName;
      DevelopmentDepartment = developmentDepartment;
    }
  }


  class Program {

    static void Main(string[] args) {
      var expected = new Organization("Organization", new Department("Development Department", new Employee("John", "Doe")));
      var actual = expected.With(x => x.DevelopmentDepartment.Manager.EmployeeFirstName, "Foo");

      Console.WriteLine(expected.DevelopmentDepartment.Manager.EmployeeFirstName);
      Console.WriteLine(actual.DevelopmentDepartment.Manager.EmployeeFirstName);
      Console.WriteLine(Object.ReferenceEquals(expected, actual)); // false
      Console.WriteLine(Object.ReferenceEquals(expected.DevelopmentDepartment, actual.DevelopmentDepartment)); // false
      Console.WriteLine(Object.ReferenceEquals(expected.DevelopmentDepartment.Manager, actual.DevelopmentDepartment.Manager)); // false
      Console.WriteLine(Object.ReferenceEquals(expected.OrganizationName, actual.OrganizationName)); // true
      Console.WriteLine(Object.ReferenceEquals(expected.DevelopmentDepartment.DepartmentTitle, expected.DevelopmentDepartment.DepartmentTitle)); // true

      var actual1 = expected.With(x => x.DevelopmentDepartment.Manager.EmployeeFirstName, "Foo");
      Console.WriteLine(Object.ReferenceEquals(actual, actual1)); // false

      Console.ReadKey(true);
    }
  }
}

